{"remainingRequest":"/Users/vbacalso/Development/bluezald/tayuyon/web/tayuyon/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/vbacalso/Development/bluezald/tayuyon/web/tayuyon/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/vbacalso/Development/bluezald/tayuyon/web/tayuyon/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/vbacalso/Development/bluezald/tayuyon/web/tayuyon/src/views/AdminDashboard.vue?vue&type=template&id=3808d382&","dependencies":[{"path":"/Users/vbacalso/Development/bluezald/tayuyon/web/tayuyon/src/views/AdminDashboard.vue","mtime":1657616680876},{"path":"/Users/vbacalso/Development/bluezald/tayuyon/web/tayuyon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/vbacalso/Development/bluezald/tayuyon/web/tayuyon/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/vbacalso/Development/bluezald/tayuyon/web/tayuyon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/vbacalso/Development/bluezald/tayuyon/web/tayuyon/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}